set laststatus=2

set statusline=
set statusline+=\ %f   " relative path
set statusline+=\ %y   " filetype
set statusline+=%=     " switch to the right side
set statusline+=%l:%c  " current line and column
set statusline+=\ %*

set colorcolumn=121,181
highlight ColorColumn ctermbg=darkgray

" Enable mouse
set mouse=a
set ttymouse=xterm2

" Show line numbers
set number
highlight LineNr ctermfg=darkgray
" hybrid in buffer for current window, absolute otherwise
:augroup numbertogglet
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter,WinLeave * set norelativenumber
:augroup END

" Backspace over
set backspace+=indent  " autoindent
set backspace+=eol     " line breaks
set backspace+=start   " start of insert

" Show tab characters, non-breakable and trailing spaces
set listchars=tab:→\ ,nbsp:•,trail:·
set list

" Use spaces instead of tabs
set expandtab

" Highlight matches
set hlsearch
set incsearch

" Prefer case insensitive search
set ignorecase
set smartcase

" Directory for swap files
set directory=~/.vim/tmp//

syntax on
filetype plugin on

set autoindent


" Bracketed paste inside tmux
if exists('$TMUX')
  let &t_BE = "\033[?2004h"
  let &t_BD = "\033[?2004l"
  let &t_PS = "\033[200~"
  let &t_PE = "\033[201~"
endif


" Decompile class files
augroup javap
  autocmd!
  autocmd BufReadPost,FileReadPost *.class call Javap()
augroup END
fun! Javap()
  let class = tempname() . ".class"
  execute "silent w" . class
  1,$delete
  let output = system("javap -v -p " . class)
  silent put=output
  silent normal ggdd
  setlocal buftype=nowrite
endf


" Git rebase helper for:
"   git rebase --interactive
"
"   L   - view commit log
"   p   - pick
"   e   - edit
"   s   - squash
"   r   - reword
"   D   - delete
"   k   - move line up
"   j   - move line down

fun! RebaseLog()
  let line = getline('.')
  let hash = matchstr(line,'\(^\w\+\s\)\@<=\w*')
  vnew
  setlocal noswapfile
  setlocal nobuflisted nowrap cursorline nonumber fdc=0
  setlocal buftype=nofile
  setlocal bufhidden=wipe
  let output = system(printf('git log -p %s^1..%s', hash,hash ))
  silent put=output
  silent normal ggdd
  setlocal nomodifiable
  setfiletype git
endf
fun! RebaseAction(name)
  exec 's/^\w\+/'.a:name.'/'
endf
fun! g:InitGitRebase()
  nmap <silent><buffer> L :cal RebaseLog()<CR>
  nmap <silent><buffer> p :cal RebaseAction('pick')<CR>
  nmap <silent><buffer> r :cal RebaseAction('reword')<CR>
  nmap <silent><buffer> e :cal RebaseAction('edit')<CR>
  nmap <silent><buffer> s :cal RebaseAction('squash')<CR>
  nmap <silent><buffer> f :cal RebaseAction('fixup')<CR>
  nmap <silent><buffer> d dd
  nmap <silent><buffer> k :m-2<CR>
  nmap <silent><buffer> j :m+<CR>
endf
autocmd filetype gitrebase :cal g:InitGitRebase()
